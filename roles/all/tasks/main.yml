- name: "Installing Basic Tools"
  package: pkg={{ item }} state=installed
  with_items:
  - epel-release
  - python-pip
  - python3
  - iptables-services
  - git
  - vim
  - sysfsutils
  - unzip
  - wget
  - net-tools
  - yum-utils
  - lvm2
  tags:
    - swarm

- name: "Upgrade Kernel to 4.x"
  include_tasks: centos_kernel_upgrade.yml
  when:
    - ansible_kernel is version('4.0','<')
    - ansible_facts['distribution'] == "CentOS"
  tags:
    - swarm

- name: "Enable PermitRootLogin in sshd_config"
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#PermitRootLogin yes'
    insertbefore: 'P '
    line: 'PermitRootLogin yes'
  tags:
    - swarm

- name: "Restart the sshd service"
  service:
    name: sshd
    state: restarted
  tags:
    - swarm


- name: "Disable seLinux"
  selinux:
    policy: targeted
    state: disabled
  register: selinux_output
  tags:
    - swarm

- name: "Print the output from disabling selinux"
  debug:
    var: selinux_output
  tags:
    - swarm

- name: "Reboot if selinux needs it"
  reboot:
  when: selinux_output.reboot_required
  tags:
    - swarm

- name: "Set timezone to UTC"
  timezone:
    name: UTC
    hwclock: UTC
  tags:
    - swarm
  ignore_errors: yes

- debug:
    var: ansible_facts['distribution']


- name: "Check if UFW is installed"
  shell: command -v ufw
  register: ufw_firewall_check
  failed_when:
    - ufw_firewall_check.rc != 0
    - ufw_firewall_check.rc != 1
  tags:
    - swarm

- name: "Check if Firewalld is installed"
  command: "command -v firewalld"
  register: firewalld_firewall_check
  failed_when:
    - firewalld_firewall_check.rc != 0
    - firewalld_firewall_check.rc != 1
  tags:
    - swarm

- name: "Check if IPTables is installed"
  command: "command -v iptables"
  register: iptables_firewall_check
  failed_when:
    - iptables_firewall_check.rc != 0
    - iptables_firewall_check.rc != 1
  tags:
    - swarm


- name: "Enable Firewalld and Open Ports for Docker Swarm"
  include_tasks: firewalld.yml
  when:
    - ansible_facts['distribution'] == "CentOS"
    - firewalld_firewall_check.rc == 0
  tags:
    - swarm

- name: "Enable UFW and Open Ports for Docker Swarm"
  include_tasks: ufw.yml
  when:
    - ansible_facts['distribution'] == "Ubuntu"
    - ufw_firewall_check.rc == 0
  tags:
    - swarm

- name: "Enable IPTables and Open Ports for Docker Swarm"
  include_tasks: iptables.yml
  when:
    - iptables_firewall_check.rc == 0
  tags:
    - swarm


- name: "Add Docker repo"
  get_url:
    url: https://download.docker.com/linux/centos/docker-ce.repo
    dest: /etc/yum.repos.d/docer-ce.repo
  when: ansible_facts['distribution'] == "CentOS"
  tags:
    - swarm

- name: "Adding apt repository for docker"
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
    state: present
  when: ansible_facts['distribution'] == "Ubuntu"
  tags:
    - swarm

- name: "Creates directory"
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory
  tags:
    - swarm

- name: "Copies override.conf for enabling Docker API"
  copy:
    src: ./files/override.conf
    dest: /etc/systemd/system/docker.service.d/override.conf
  tags:
    - swarm

- name: "Install Docker-CE"
  package:
    name: docker-ce
    state: present
  tags:
    - swarm

- name: "Make sure the service starts at boot and is currently started"
  systemd:
    name: docker
    daemon_reload: yes
    state: restarted
    enabled: yes
  tags:
    - swarm

- name: "Query MDM Cluster to get MDM IP's"
  uri:
    url: "https://{{ lookup('env','vxflex_gateway_ip') }}:{{ lookup('env','vxflex_gateway_port') }}\
        /api/instances/System/queryMdmCluster"
    return_content: yes
    method: POST
    body: {}
    body_format: json
    validate_certs: False
    status_code:
      - 200
      - 201
      - 202
  register: cluster_output
  tags:
    - vxflex

- name: "Gather master IP's"
  set_fact:
    masterMDMs: "{{ cluster_output.json | json_query(query) }}"
  vars:
    query: "master.ips"
  tags:
    - vxflex

- name: "Gather slave IP's"
  set_fact:
    slaveMDMs: "{{ cluster_output.json | json_query(query) }}"
  vars:
    query: "slaves[].ips"
  tags:
    - vxflex

- name: "Combine all IP's"
  set_fact:
    MDMs: "{{ masterMDMs + slaveMDMs | flatten }}"
  tags:
    - vxflex

- name: "Install SDC"
  yum:
    name: https://object.bluehairfreak.com/vxflexos/EMC-ScaleIO-sdc.el7.x86_64.rpm
    state: present
  environment:
    MDM_IP: "{{ MDMs | join(',') }}"
  tags:
    - vxflex

- name: "Adding user root"
  user: name=root
        group=docker
  tags:
    - swarm

- name: "Find out if rexray is already installed"
  shell: docker plugin ls | grep rexray
  register: REXRAY
  failed_when: "REXRAY.rc == 2"
  tags:
    - vxflex

- name: "Install RexRay if it is not already installed"
  shell: echo "y" | docker plugin install rexray/scaleio SCALEIO_ENDPOINT=https://{{ lookup('env','vxflex_gateway_ip') }}:{{ lookup('env','vxflex_gateway_port') }}/api SCALEIO_USERNAME={{ lookup('env','vxflex_username') }} SCALEIO_PASSWORD={{ lookup('env','vxflex_password') }} SCALEIO_SYSTEMNAME={{ lookup('env','vxflex_system_name') }} SCALEIO_PROTECTIONDOMAINNAME={{ lookup('env','vxflex_protection_domain') }} SCALEIO_STORAGEPOOLNAME={{ lookup('env','vxflex_storage_pool') }} REXRAY_PREEMPT=true REXRAY_LOGLEVEL='DEBUG'
  when: REXRAY.rc == 1
  tags:
    - vxflex

- name: "Ensure the rexray plugin is enabled"
  shell: status=`docker plugin ls | grep rexray` && [ ! `echo $status | awk '{print $NF}'` ] && docker plugin enable `echo $status | awk '{print $1}'`
  tags:
    - vxflex
